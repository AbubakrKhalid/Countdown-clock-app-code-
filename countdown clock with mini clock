import tkinter as tk
from tkinter import ttk
import threading
import time
import winsound  # Windows only module to play sound (used for 10-minute rings)

class StudyTimerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Study Timer")
        self.root.geometry("400x500")

        # Timer session variables
        self.study_time = tk.IntVar(value=25)  # Study time in minutes
        self.break_time = tk.IntVar(value=5)   # Break time in minutes
        self.remaining_time = 0
        self.total_time = 0
        self.is_running = False
        self.is_paused = False
        self.is_study_session = True
        self.session_count = 0
        self.mini_clock_visible = True
        self.elapsed_time = 0  # Total elapsed time during all sessions
        self.elapsed_clock_visible = True
        self.last_ring_time = 0  # Time of last 10-minute ring

        # Create GUI elements
        self.create_main_window()
        self.create_mini_clock_window()
        self.create_elapsed_clock_window()
        self.create_session_circles()

    # Main application UI setup
    def create_main_window(self):
        # Main timer display
        self.timer_display = tk.Label(self.root, text="00:00:00", font=("Helvetica", 48))
        self.timer_display.pack(pady=10)

        # Progress bar to track time visually
        self.progress = ttk.Progressbar(self.root, length=200, mode='determinate')
        self.progress.pack(pady=10)

        # Control buttons: Start, Pause, Resume, Reset, Toggle mini clock
        self.controls_frame = tk.Frame(self.root)
        self.controls_frame.pack(pady=10)

        self.start_button = tk.Button(self.controls_frame, text="Start", command=self.start_timer)
        self.start_button.grid(row=0, column=0, padx=5)
        self.pause_button = tk.Button(self.controls_frame, text="Pause", command=self.pause_timer)
        self.pause_button.grid(row=0, column=1, padx=5)
        self.resume_button = tk.Button(self.controls_frame, text="Resume", command=self.resume_timer)
        self.resume_button.grid(row=0, column=2, padx=5)
        self.reset_button = tk.Button(self.controls_frame, text="Reset", command=self.reset_timer)
        self.reset_button.grid(row=0, column=3, padx=5)
        self.toggle_button = tk.Button(self.controls_frame, text="Toggle Mini Clock", command=self.toggle_mini_clock)
        self.toggle_button.grid(row=0, column=4, padx=5)

        # Inputs for study and break durations
        self.settings_frame = tk.Frame(self.root)
        self.settings_frame.pack(pady=10)

        tk.Label(self.settings_frame, text="Study Time (minutes):").grid(row=0, column=0, padx=5)
        self.study_time_entry = tk.Entry(self.settings_frame, textvariable=self.study_time, width=5)
        self.study_time_entry.grid(row=0, column=1, padx=5)

        tk.Label(self.settings_frame, text="Break Time (minutes):").grid(row=0, column=2, padx=5)
        self.break_time_entry = tk.Entry(self.settings_frame, textvariable=self.break_time, width=5)
        self.break_time_entry.grid(row=0, column=3, padx=5)

        # Session counter display
        self.session_counter = tk.Label(self.root, text="Sessions Completed: 0", font=("Helvetica", 14))
        self.session_counter.pack(pady=10)

        # To-Do List Section
        self.todo_frame = tk.Frame(self.root)
        self.todo_frame.pack(pady=10)
        tk.Label(self.todo_frame, text="To-Do List").grid(row=0, column=0, columnspan=2)

        self.todo_input = tk.Entry(self.todo_frame, width=30)
        self.todo_input.grid(row=1, column=0, padx=5)
        self.add_todo_button = tk.Button(self.todo_frame, text="Add", command=self.add_todo)
        self.add_todo_button.grid(row=1, column=1, padx=5)

        self.todo_listbox = tk.Listbox(self.todo_frame, width=40, height=10)
        self.todo_listbox.grid(row=2, column=0, columnspan=2, pady=10)

    # Create floating mini clock window
    def create_mini_clock_window(self):
        self.mini_clock = tk.Toplevel(self.root)
        self.mini_clock.title("Mini Clock")
        self.mini_clock.geometry("150x80")
        self.mini_clock.overrideredirect(True)  # Remove window border
        self.mini_clock.attributes('-topmost', True)  # Always on top
        self.mini_clock.bind("<Button-1>", self.toggle_mini_clock)

        self.mini_clock_canvas = tk.Canvas(self.mini_clock, width=150, height=80)
        self.mini_clock_canvas.pack(fill="both", expand=True)

        # Time text and progress bar
        self.mini_clock_display = self.mini_clock_canvas.create_text(75, 30, text="00:00:00", font=("Helvetica", 18), fill="black")
        self.mini_clock_progress = self.mini_clock_canvas.create_rectangle(0, 60, 0, 80, fill="green", outline="")

    # Create floating elapsed time window
    def create_elapsed_clock_window(self):
        self.elapsed_clock = tk.Toplevel(self.root)
        self.elapsed_clock.title("Elapsed Time")
        self.elapsed_clock.geometry("150x80+1300+0")  # Position to right side
        self.elapsed_clock.overrideredirect(True)
        self.elapsed_clock.attributes('-topmost', True)
        self.elapsed_clock.bind("<Button-1>", self.toggle_elapsed_clock)

        self.elapsed_clock_canvas = tk.Canvas(self.elapsed_clock, width=150, height=80)
        self.elapsed_clock_canvas.pack(fill="both", expand=True)

        self.elapsed_clock_display = self.elapsed_clock_canvas.create_text(75, 30, text="Elapsed: 00:00:00", font=("Helvetica", 14), fill="blue")

    # Display small circles representing completed sessions
    def create_session_circles(self):
        self.session_canvas = tk.Canvas(self.root, width=400, height=50)
        self.session_canvas.pack(pady=10)
        self.circles = []
        for i in range(8):
            circle = self.session_canvas.create_oval(20 + i * 40, 10, 50 + i * 40, 40, outline="gray", fill="white")
            self.circles.append(circle)

    # Update all timer displays (main, mini clock, progress, elapsed)
    def update_display(self):
        hours, remainder = divmod(self.remaining_time, 3600)
        minutes, seconds = divmod(remainder, 60)
        time_str = f"{int(hours):02}:{int(minutes):02}:{int(seconds):02}"
        self.timer_display.config(text=time_str)
        self.mini_clock_canvas.itemconfig(self.mini_clock_display, text=time_str)

        self.progress['value'] = (self.total_time - self.remaining_time) / self.total_time * 100
        progress_width = ((self.total_time - self.remaining_time) / self.total_time) * 150
        self.mini_clock_canvas.coords(self.mini_clock_progress, 0, 60, progress_width, 80)

        # Update elapsed time
        elapsed_hours, elapsed_remainder = divmod(self.elapsed_time, 3600)
        elapsed_minutes, elapsed_seconds = divmod(elapsed_remainder, 60)
        elapsed_time_str = f"Elapsed: {int(elapsed_hours):02}:{int(elapsed_minutes):02}:{int(elapsed_seconds):02}"
        self.elapsed_clock_canvas.itemconfig(self.elapsed_clock_display, text=elapsed_time_str)

    # Start the study timer
    def start_timer(self):
        if not self.is_running and not self.is_paused:
            self.total_time = self.study_time.get() * 60
            self.remaining_time = self.total_time
            self.is_study_session = True
            self.is_running = True
            self.show_mini_clock()
            self.show_elapsed_clock()
            self.run_timer()

    # Main timer countdown logic
    def run_timer(self):
        if self.is_running:
            if self.remaining_time > 0:
                self.remaining_time -= 1
                self.elapsed_time += 1
                self.update_display()

                # Ring every 10 minutes as a motivation cue
                if self.elapsed_time - self.last_ring_time >= 600:
                    winsound.Beep(1000, 200)
                    winsound.Beep(1200, 200)
                    self.last_ring_time = self.elapsed_time

                self.root.after(1000, self.run_timer)
            else:
                # Switch between study/break sessions
                if self.is_study_session:
                    self.total_time = self.break_time.get() * 60
                else:
                    self.total_time = self.study_time.get() * 60
                    self.session_count += 1
                    self.session_counter.config(text=f"Sessions Completed: {self.session_count}")
                    self.fill_circle(self.session_count - 1)

                self.remaining_time = self.total_time
                self.is_study_session = not self.is_study_session
                self.run_timer()

    # Fill in session circle after completing a study session
    def fill_circle(self, index):
        if 0 <= index < len(self.circles):
            self.session_canvas.itemconfig(self.circles[index], fill="green")

    def pause_timer(self):
        self.is_running = False
        self.is_paused = True

    def resume_timer(self):
        if not self.is_running and self.is_paused:
            self.is_running = True
            self.is_paused = False
            self.run_timer()

    # Reset timer and visuals
    def reset_timer(self):
        self.is_running = False
        self.is_paused = False
        self.remaining_time = 0
        self.elapsed_time = 0
        self.last_ring_time = 0
        self.update_display()
        self.hide_mini_clock()
        self.hide_elapsed_clock()
        self.reset_circles()

    def reset_circles(self):
        for circle in self.circles:
            self.session_canvas.itemconfig(circle, fill="white")

    # Add task to to-do list
    def add_todo(self):
        task = self.todo_input.get()
        if task:
            self.todo_listbox.insert(tk.END, task)
            self.todo_input.delete(0, tk.END)

    # Toggle mini clock visibility or pause/resume when running
    def toggle_mini_clock(self, event=None):
        if self.is_running:
            self.pause_timer()
        elif self.is_paused:
            self.resume_timer()
        else:
            if self.mini_clock_visible:
                self.hide_mini_clock()
            else:
                self.show_mini_clock()

    # Toggle elapsed time window
    def toggle_elapsed_clock(self, event=None):
        if self.elapsed_clock_visible:
            self.hide_elapsed_clock()
        else:
            self.show_elapsed_clock()

    def show_mini_clock(self):
        self.mini_clock.deiconify()
        self.mini_clock_visible = True

    def hide_mini_clock(self):
        self.mini_clock.withdraw()
        self.mini_clock_visible = False

    def show_elapsed_clock(self):
        self.elapsed_clock.deiconify()
        self.elapsed_clock_visible = True

    def hide_elapsed_clock(self):
        self.elapsed_clock.withdraw()
        self.elapsed_clock_visible = False

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = StudyTimerApp(root)
    root.mainloop()
