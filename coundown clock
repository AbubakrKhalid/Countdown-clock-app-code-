import tkinter as tk
from tkinter import ttk
import time
import platform

if platform.system() == "Windows":
    import winsound
else:
    winsound = None

class StudyTimerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Study Timer")
        self.root.geometry("400x300")

        self.study_time = tk.IntVar(value=25)
        self.break_time = tk.IntVar(value=5)
        self.remaining_time = 0
        self.total_time = 0
        self.is_running = False
        self.is_paused = False
        self.is_study_session = True
        self.session_count = 0
        self.elapsed_time = 0
        self.last_ring_time = 0

        self.setup_ui()

    def setup_ui(self):
        tk.Label(self.root, text="00:00:00", font=("Helvetica", 48), name="timer").pack(pady=10)
        self.progress = ttk.Progressbar(self.root, length=250, mode='determinate')
        self.progress.pack()

        control_frame = tk.Frame(self.root)
        control_frame.pack(pady=10)
        for i, (txt, cmd) in enumerate([
            ("Start", self.start_timer),
            ("Pause", self.pause_timer),
            ("Resume", self.resume_timer),
            ("Reset", self.reset_timer)]):
            tk.Button(control_frame, text=txt, command=cmd).grid(row=0, column=i, padx=3)

        settings = tk.Frame(self.root)
        settings.pack()
        tk.Label(settings, text="Study (min):").grid(row=0, column=0)
        tk.Entry(settings, textvariable=self.study_time, width=5).grid(row=0, column=1)
        tk.Label(settings, text="Break (min):").grid(row=0, column=2)
        tk.Entry(settings, textvariable=self.break_time, width=5).grid(row=0, column=3)

        self.session_label = tk.Label(self.root, text="Sessions Completed: 0", font=("Helvetica", 12))
        self.session_label.pack(pady=10)

    def get_timer_label(self):
        return self.root.nametowidget("timer")

    def update_display(self):
        h, r = divmod(self.remaining_time, 3600)
        m, s = divmod(r, 60)
        self.get_timer_label().config(text=f"{h:02}:{m:02}:{s:02}")
        if self.total_time > 0:
            self.progress['value'] = (self.total_time - self.remaining_time) / self.total_time * 100

    def start_timer(self):
        if not self.is_running and not self.is_paused:
            self.total_time = self.study_time.get() * 60
            self.remaining_time = self.total_time
            self.is_study_session = True
            self.is_running = True
            self.run_timer()

    def run_timer(self):
        if self.is_running:
            if self.remaining_time > 0:
                self.remaining_time -= 1
                self.elapsed_time += 1
                self.update_display()

                if self.elapsed_time - self.last_ring_time >= 600:
                    if winsound:
                        winsound.Beep(1000, 200)
                        winsound.Beep(1200, 200)
                    self.last_ring_time = self.elapsed_time

                self.root.after(1000, self.run_timer)
            else:
                self.total_time = (self.break_time if self.is_study_session else self.study_time).get() * 60
                self.remaining_time = self.total_time
                if not self.is_study_session:
                    self.session_count += 1
                    self.session_label.config(text=f"Sessions Completed: {self.session_count}")
                self.is_study_session = not self.is_study_session
                self.run_timer()

    def pause_timer(self):
        self.is_running = False
        self.is_paused = True

    def resume_timer(self):
        if self.is_paused:
            self.is_running = True
            self.is_paused = False
            self.run_timer()

    def reset_timer(self):
        self.is_running = False
        self.is_paused = False
        self.remaining_time = 0
        self.elapsed_time = 0
        self.last_ring_time = 0
        self.session_count = 0
        self.get_timer_label().config(text="00:00:00")
        self.progress['value'] = 0
        self.session_label.config(text="Sessions Completed: 0")

if __name__ == "__main__":
    root = tk.Tk()
    app = StudyTimerApp(root)
    root.mainloop()
